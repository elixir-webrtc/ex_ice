defmodule ExICE.Priv.DNS.MessageTest do
  use ExUnit.Case, async: true

  @mdns_query <<0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24,
                0x34, 0x35, 0x65, 0x38, 0x62, 0x34, 0x36, 0x39, 0x2D, 0x36, 0x62, 0x32, 0x32,
                0x2D, 0x34, 0x66, 0x34, 0x31, 0x2D, 0x61, 0x31, 0x30, 0x32, 0x2D, 0x66, 0x64,
                0x39, 0x65, 0x61, 0x38, 0x62, 0x64, 0x36, 0x31, 0x38, 0x32, 0x05, 0x6C, 0x6F,
                0x63, 0x61, 0x6C, 0x00, 0x00, 0x01, 0x80, 0x01>>

  @mdns_query_response <<0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
                         0x24, 0x34, 0x35, 0x65, 0x38, 0x62, 0x34, 0x36, 0x39, 0x2D, 0x36, 0x62,
                         0x32, 0x32, 0x2D, 0x34, 0x66, 0x34, 0x31, 0x2D, 0x61, 0x31, 0x30, 0x32,
                         0x2D, 0x66, 0x64, 0x39, 0x65, 0x61, 0x38, 0x62, 0x64, 0x36, 0x31, 0x38,
                         0x32, 0x05, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x00, 0x00, 0x01, 0x80, 0x01,
                         0x00, 0x00, 0x00, 0x78, 0x00, 0x04, 0xC0, 0xA8, 0x00, 0x01>>

  @addr "45e8b469-6b22-4f41-a102-fd9ea8bd6182.local"

  test "invalid message" do
    assert ExICE.Priv.DNS.Message.decode(<<>>) == :error
    # header too short (should be 96)
    assert ExICE.Priv.DNS.Message.decode(<<0::95>>) == :error
  end

  test "mdns query" do
    query = %ExICE.Priv.DNS.Message{
      question: [
        %{
          qname: @addr,
          qtype: :a,
          qclass: :in,
          unicast_response: true
        }
      ]
    }

    assert {:ok, query} == ExICE.Priv.DNS.Message.decode(@mdns_query)
    assert @mdns_query == ExICE.Priv.DNS.Message.encode(query)
  end

  test "mdns query response" do
    query_response = %ExICE.Priv.DNS.Message{
      qr: true,
      aa: true,
      answer: [
        %{
          name: @addr,
          type: :a,
          ttl: 120,
          flush_cache: true,
          class: :in,
          rdata: <<192, 168, 0, 1>>
        }
      ]
    }

    assert {:ok, query_response} == ExICE.Priv.DNS.Message.decode(@mdns_query_response)
    assert @mdns_query_response == ExICE.Priv.DNS.Message.encode(query_response)
  end
end
